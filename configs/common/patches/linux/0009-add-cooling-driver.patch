From 3906608b67bc4074e19abc87b617939325a12483 Mon Sep 17 00:00:00 2001
From: Justin Hammond <justin@dynam.ac>
Date: Fri, 12 Apr 2024 17:49:29 +0800
Subject: [PATCH] Add cvitek-cooling driver

---
 drivers/thermal/Kconfig          |   6 +
 drivers/thermal/Makefile         |   1 +
 drivers/thermal/cv181x_cooling.c | 279 +++++++++++++++++++++++++++++++
 3 files changed, 286 insertions(+)
 create mode 100644 drivers/thermal/cv181x_cooling.c

diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index f91f06d425fd..b220f4a1ee27 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -456,6 +456,12 @@ config CV180X_THERMAL
 	  the alert trip point interrupts and notifies the thermal framework with
 	  the trip point and temperature details of the zone.
 
+config CV180X_COOLING
+	tristate "CPU Throttling Cooling Driver for CVITEK CV180X"
+	depends on ARCH_CV181X 
+	help
+	  Select this driver for CVITEK CV180X cpu throttling cooling driver
+
 config AMLOGIC_THERMAL
 	tristate "Amlogic Thermal Support"
 	default ARCH_MESON
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index e35f57cc2000..6ef07777fa55 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -66,3 +66,4 @@ obj-$(CONFIG_CV181X_THERMAL)	+= cv181x_thermal.o
 obj-$(CONFIG_CV180X_THERMAL)	+= cv180x_thermal.o
 obj-$(CONFIG_CV1835_THERMAL)    += cv1835_thermal.o
 obj-$(CONFIG_CV182X_THERMAL)    += cv182x_thermal.o
+obj-$(CONFIG_CV180X_COOLING) 	+= cv181x_cooling.o
\ No newline at end of file
diff --git a/drivers/thermal/cv181x_cooling.c b/drivers/thermal/cv181x_cooling.c
new file mode 100644
index 000000000000..fdfd396ca3d4
--- /dev/null
+++ b/drivers/thermal/cv181x_cooling.c
@@ -0,0 +1,279 @@
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/thermal.h>
+#include <linux/clk.h>
+
+struct dev_freq {
+	unsigned long cpu_freq;
+	unsigned long tpu_freq;
+};
+
+struct cooling_device {
+	struct thermal_cooling_device *cdev;
+	struct mutex lock; /* lock to protect the content of this struct */
+	unsigned long clk_state;
+	unsigned long max_clk_state;
+	struct clk *clk_cpu;
+	struct clk *clk_tpu;
+	struct dev_freq *dev_freqs;
+};
+
+static const struct dev_freq default_dev_freqs[] = {
+#ifdef __riscv
+	{850000000, 500000000},
+	{425000000, 250000000},
+	{425000000, 125000000},
+#else
+	{800000000, 500000000},
+	{400000000, 250000000},
+	{400000000, 125000000},
+#endif
+};
+
+/* cooling device thermal callback functions are defined below */
+
+/**
+ * cooling_get_max_state - callback function to get the max cooling state.
+ * @cdev: thermal cooling device pointer.
+ * @state: fill this variable with the max cooling state.
+ *
+ * Callback for the thermal cooling device to return the
+ * max cooling state.
+ *
+ * Return: 0 on success, an error code otherwise.
+ */
+static int cooling_get_max_state(struct thermal_cooling_device *cdev,
+					unsigned long *state)
+{
+	struct cooling_device *cvcdev = cdev->devdata;
+
+	mutex_lock(&cvcdev->lock);
+	*state = cvcdev->max_clk_state;
+	mutex_unlock(&cvcdev->lock);
+
+	return 0;
+}
+
+/**
+ * cooling_get_cur_state - function to get the current cooling state.
+ * @cdev: thermal cooling device pointer.
+ * @state: fill this variable with the current cooling state.
+ *
+ * Callback for the thermal cooling device to return the current cooling
+ * state.
+ *
+ * Return: 0 (success)
+ */
+static int cooling_get_cur_state(struct thermal_cooling_device *cdev,
+					unsigned long *state)
+{
+	struct cooling_device *cvcdev = cdev->devdata;
+
+	mutex_lock(&cvcdev->lock);
+	*state = cvcdev->clk_state;
+	mutex_unlock(&cvcdev->lock);
+
+	return 0;
+}
+
+/**
+ * cooling_set_cur_state - function to set the current cooling state.
+ * @cdev: thermal cooling device pointer.
+ * @state: set this variable to the current cooling state.
+ *
+ * Callback for the thermal cooling device to change the cv181x cooling
+ * current cooling state.
+ *
+ * Return: 0 on success, an error code otherwise.
+ */
+static int cooling_set_cur_state(struct thermal_cooling_device *cdev,
+					unsigned long state)
+{
+	struct cooling_device *cvcdev = cdev->devdata;
+
+	dev_dbg(&cdev->device, "set cur_state=%ld\n", state);
+	dev_dbg(&cdev->device, "clk_cpu=%ld Hz\n", clk_get_rate(cvcdev->clk_cpu));
+	dev_dbg(&cdev->device, "clk_tpu_axi=%ld Hz\n", clk_get_rate(cvcdev->clk_tpu));
+
+	mutex_lock(&cvcdev->lock);
+
+	if (state <= cvcdev->max_clk_state && state != cvcdev->clk_state) {
+		dev_dbg(&cdev->device, "dev_freq[%ld].cpu_freq=%ld\n", state, cvcdev->dev_freqs[state].cpu_freq);
+		dev_dbg(&cdev->device, "dev_freq[%ld].tpu_freq=%ld\n", state, cvcdev->dev_freqs[state].tpu_freq);
+
+		if (cvcdev->dev_freqs[state].cpu_freq != clk_get_rate(cvcdev->clk_cpu)) {
+			dev_dbg(&cdev->device, "set cpu freq=%ld\n", cvcdev->dev_freqs[state].cpu_freq);
+			clk_set_rate(cvcdev->clk_cpu, cvcdev->dev_freqs[state].cpu_freq);
+		}
+
+		if (cvcdev->dev_freqs[state].tpu_freq != clk_get_rate(cvcdev->clk_tpu)) {
+			dev_dbg(&cdev->device, "set tpu freq=%ld\n", cvcdev->dev_freqs[state].tpu_freq);
+			clk_set_rate(cvcdev->clk_tpu, cvcdev->dev_freqs[state].tpu_freq);
+		}
+
+		cvcdev->clk_state = state;
+	}
+
+	mutex_unlock(&cvcdev->lock);
+	return 0;
+}
+
+/* Bind clock callbacks to thermal cooling device ops */
+static struct thermal_cooling_device_ops const cooling_ops = {
+	.get_max_state = cooling_get_max_state,
+	.get_cur_state = cooling_get_cur_state,
+	.set_cur_state = cooling_set_cur_state,
+};
+
+static struct cooling_device *
+cooling_device_register(struct device *dev)
+{
+	struct thermal_cooling_device *cdev;
+	struct cooling_device *cvcdev = NULL;
+	struct device_node *np = dev->of_node;
+	unsigned long clk_cpu_max_freq;
+	unsigned long clk_tpu_max_freq;
+	unsigned long j;
+	int proplen;
+	int i;
+
+	cvcdev = devm_kzalloc(dev, sizeof(*cvcdev), GFP_KERNEL);
+	if (!cvcdev)
+		return ERR_PTR(-ENOMEM);
+
+	mutex_init(&cvcdev->lock);
+
+	/* get clk_cpu */
+	cvcdev->clk_cpu = devm_clk_get(dev, "clk_cpu");
+	if (IS_ERR(cvcdev->clk_cpu)) {
+		dev_err(dev, "failed to get clk_cpu\n");
+		return ERR_PTR(-EINVAL);
+	}
+
+	cvcdev->clk_tpu = devm_clk_get(dev, "clk_tpu_axi");
+	if (IS_ERR(cvcdev->clk_tpu)) {
+		dev_err(dev, "failed to get clk_tpu_axi\n");
+		return ERR_PTR(-EINVAL);
+	}
+
+	/* get device frequency list from device tree */
+	proplen = of_property_count_u32_elems(np, "dev-freqs");
+	dev_info(dev, "elems of dev-freqs=%d\n", proplen);
+
+	if (proplen < 0 || proplen % 2) {
+		dev_info(dev, "No 'dev-freqs' property found, use default value\n");
+
+		cvcdev->dev_freqs = devm_kmemdup(dev, &default_dev_freqs, sizeof(default_dev_freqs), GFP_KERNEL);
+		if (!cvcdev->dev_freqs)
+			return ERR_PTR(-ENOMEM);
+
+		cvcdev->max_clk_state = ARRAY_SIZE(default_dev_freqs) - 1;
+	} else {
+		cvcdev->dev_freqs = devm_kzalloc(dev, sizeof(struct dev_freq) * (proplen / 2), GFP_KERNEL);
+
+		if (!cvcdev->dev_freqs)
+			return ERR_PTR(-ENOMEM);
+
+		for (i = 0; i < proplen / 2; i++) {
+			of_property_read_u32_index(np, "dev-freqs", i * 2,
+						   (u32 *)&cvcdev->dev_freqs[i].cpu_freq);
+			of_property_read_u32_index(np, "dev-freqs", i * 2 + 1,
+						   (u32 *)&cvcdev->dev_freqs[i].tpu_freq);
+		}
+
+		cvcdev->max_clk_state = (proplen / 2) - 1;
+	}
+
+	/* Get the cpu/tpu original clk freq as max freq */
+	clk_cpu_max_freq = clk_get_rate(cvcdev->clk_cpu);
+	clk_tpu_max_freq = clk_get_rate(cvcdev->clk_tpu);
+
+	/* Check if the cpu/tpu clk freq exceeds max freq */
+	for (j = 0; j <= cvcdev->max_clk_state; j++) {
+		if (cvcdev->dev_freqs[j].cpu_freq > clk_cpu_max_freq) {
+			dev_info(dev, "dev_freqs[%ld].cpu_freq=%ld exceeds max_freq=%ld\n",
+				 j, cvcdev->dev_freqs[j].cpu_freq, clk_cpu_max_freq);
+			cvcdev->dev_freqs[j].cpu_freq = clk_cpu_max_freq;
+		}
+
+		if (cvcdev->dev_freqs[j].tpu_freq > clk_tpu_max_freq) {
+			dev_info(dev, "dev_freqs[%ld].tpu_freq=%ld exceeds max_freq=%ld\n",
+				 j, cvcdev->dev_freqs[j].tpu_freq, clk_tpu_max_freq);
+			cvcdev->dev_freqs[j].tpu_freq = clk_tpu_max_freq;
+		}
+
+		dev_info(dev, "dev_freqs[%ld]: %ld %ld\n",
+			 j, cvcdev->dev_freqs[j].cpu_freq, cvcdev->dev_freqs[j].tpu_freq);
+	}
+
+	cvcdev->clk_state = 0;
+	cdev = thermal_of_cooling_device_register(dev->of_node,
+						  "cooling", cvcdev,
+						  &cooling_ops);
+	if (IS_ERR(cdev))
+		return ERR_PTR(-EINVAL);
+
+	cvcdev->cdev = cdev;
+
+	return cvcdev;
+}
+
+static void cooling_device_unregister(struct cooling_device
+						 *cvcdev)
+{
+	thermal_cooling_device_unregister(cvcdev->cdev);
+}
+
+static int cooling_probe(struct platform_device *pdev)
+{
+	struct cooling_device *cvcdev;
+
+	cvcdev = cooling_device_register(&pdev->dev);
+	if (IS_ERR(cvcdev)) {
+		int ret = PTR_ERR(cvcdev);
+
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "Failed to register cooling device %d\n", ret);
+
+		return ret;
+	}
+
+	platform_set_drvdata(pdev, cvcdev);
+	dev_info(&pdev->dev, "Cooling device registered: %s\n", cvcdev->cdev->type);
+
+	return 0;
+}
+
+static int cooling_remove(struct platform_device *pdev)
+{
+	struct cooling_device *cvcdev = platform_get_drvdata(pdev);
+
+	if (!IS_ERR(cvcdev))
+		cooling_device_unregister(cvcdev);
+
+	return 0;
+}
+
+static const struct of_device_id cooling_match[] = {
+	{.compatible = "sophgo,cooling"},
+	{.compatible = "cvitek,cv181x-cooling"},
+	{},
+};
+MODULE_DEVICE_TABLE(of, cooling_match);
+
+static struct platform_driver cooling_driver = {
+	.driver = {
+		.name = "cooling",
+		.of_match_table = of_match_ptr(cooling_match),
+	},
+	.probe = cooling_probe,
+	.remove = cooling_remove,
+};
+
+module_platform_driver(cooling_driver);
+
+MODULE_AUTHOR("fisher.cheng@cvitek.com");
+MODULE_DESCRIPTION("sophgo cooling driver");
+MODULE_LICENSE("GPL");
-- 
2.44.0

